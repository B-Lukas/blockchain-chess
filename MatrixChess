pragma solidity ^0.4.22;

contract Figures{
    
string[] Moves;
int[8][8] Chessboard;
bool whiteSmallRochade = false;
bool blackSmallRochade = false;
bool whiteLargeRochade = false;
bool blackLargeRochade = false;

function startGame() public returns(int[8][8]){ //800k Gas to initialize Game
    
    Chessboard[0] = [5,4,3,2,1,3,4,5];
    Chessboard[1] = [6,6,6,6,6,6,6,6];
    Chessboard[2] = [0,0,0,0,0,0,0,0];
    Chessboard[3] = [0,0,0,0,0,0,0,0];
    Chessboard[4] = [0,0,0,0,0,0,0,0];
    Chessboard[5] = [0,0,0,0,0,0,0,0];
    Chessboard[6] = [8,8,8,8,8,8,8,8];
    Chessboard[7] = [9,10,11,12,13,11,10,9];
    
    /*
    1 = WKing
    2 = WQuenn
    3 = WBishop
    4 = WKnight
    5 = WRook
    6 = WPawn
    
    7 = empty
    
    13 = BKing
    12 = BQuenn
    11 = BBishop
    10 = BKnight
    9 = BRook
    8 = BPawn
*/
    return Chessboard;
}

//TODO: Schachfeld als Bitfolge speichernt
//TODO: Zuege speichern
//TODO: Input nur zwischen 0-63 gültig
//TODO: Weiß fängt immer an und dann im Wechsel

function horizontalMovement(int _figure, int _fromY, int _fromX, int _toX, int _movePatternX)internal view returns(bool){
    bool clear = true;

    for(int i = _fromX; i != _toX; i + _movePatternX){
        //Wenn eine gleichfarbige Spielfigur im Weg steht (Weiß)    
        if(_figure < 7 && Chessboard[uint(_fromY)][uint(i)] > 0 && Chessboard[uint(i)][uint(i)] < 7){
            //Sofortige invalidierung
            return false;
        }
        //Wenn eine gleichfarbige Spielfigur im Weg steht (Schwarz)
        if(_figure > 8 && Chessboard[uint(_fromY)][uint(i)] < 0){ 
            //Sofortiger invalidierung
            return false;
        }
        //Wenn eine schwarze(schlagbare) Figur im Weg steht, aus weißer Perspektive
        if(_figure > 0 && _figure < 7 && Chessboard[uint(_fromY)][uint(i)] > 7){
            clear = false;
        }
        //Wenn eine weiße(schlagbare) Figur im Weg steht, aus schwarzer Perspektive
        if(_figure < 0 && Chessboard[uint(_fromY)][uint(i)] < 7){
            clear = false;
        }
        else return true;
    }
}

function getBoard() public view returns(int[8][8]){
    
    return Chessboard;
}    

function verticalMovement(int _figure, int _fromY, int _fromX, int _movePatternY)internal view returns(bool){
    
    bool clear = true;
    int i;
    
    for(i = _fromY + _movePatternY; i !=  _movePatternY; i = i +  _movePatternY){
        if(clear == false){
            return false;
        }
        //Wenn eine gleichfarbige Spielfigur im Weg steht (Weiß)    
        if(_figure < 7 && Chessboard[uint(i)][uint(_fromX)] > 0 && Chessboard[uint(i)][uint(_fromX)] < 7){
            //Sofortige invalidierung
            return false;
        }
        //Wenn eine gleichfarbige Spielfigur im Weg steht (Schwarz)
        if(_figure > 8 && Chessboard[uint(i)][uint(_fromX)] < 0){ 
            //Sofortiger invalidierung
            return false;
        }
        //Wenn eine schwarze(schlagbare) Figur im Weg steht, aus weißer Perspektive
        if(_figure > 0 && _figure < 7 && Chessboard[uint(i)][uint(_fromX)] > 7){
            clear = false;
        }
        //Wenn eine weiße(schlagbare) Figur im Weg steht, aus schwarzer Perspektive
        if(_figure < 0 && Chessboard[uint(i)][uint(_fromX)] < 7){
            clear = false;
        }
    }
    return true;    
}
    
    
function skewedMovment(int _figure, int _fromY, int _fromX, int _toY, int _movePatternX, int _movePatternY) internal view returns (bool){
    
    bool clear = true;
    int i;
    
    //Schräg nach oben-rechts und oben-links
    if(_movePatternY == 1){
        for(i = 1; _fromY+i != _toY; i = i + _movePatternX){
            _fromX = _fromX + _movePatternX;
            
            if(clear == false){
            return false;
            }    
            
            if(_figure > 7 && Chessboard[uint(i)][uint(_fromX)] > 7){
            return false;
            }
            if(_figure < 7 && Chessboard[uint(i)][uint(_fromX)] < 7){
            return false;   
            }
            if(_figure > 7 && Chessboard[uint(i)][uint(_fromX)] < 7){
            clear == false;
            }
            if(_figure < 7 && Chessboard[uint(i)][uint(_fromX)] > 7){
            clear == false;   
            }    
        }
    }   

    //Schräg nach unten-links und unten rechts
    if(_movePatternY == -1){
        for(i = 1; _fromY-i != _toY; i = i + _movePatternX){
            _fromX = _fromX + _movePatternX;
            
            if(clear == false){
            return false;
            }    
            
            if(_figure > 7 && Chessboard[uint(i)][uint(_fromX)] > 7){
            return false;
            }
            if(_figure < 7 && Chessboard[uint(i)][uint(_fromX)] < 7){
            return false;   
            }
            if(_figure > 7 && Chessboard[uint(i)][uint(_fromX)] < 7){
            clear == false;
            }
            if(_figure < 7 && Chessboard[uint(i)][uint(_fromX)] > 7){
            clear == false;   
            }    
        }
    }
} 
//Extra function für die Rochade
function rochade(int _figure, int _fromY, int _fromX, int _toY, int _toX)public view returns(bool){
    //große Rochade
    if((_figure == 1 && _toY == 0 && _toX == 2 && whiteLargeRochade == false) || _figure == 13 && _toY == 7 && _toX == 5 && whiteLargeRochade == false){
        for(uint c = 1;c < 4 ;c++){
            if(_figure == 1){
                if(Chessboard[0][c] != 0){
                    return false;
                }
            }
            if(_figure == 13){
                if(Chessboard[7][c] != 0){
                    return false;
                }
            }            
        }
        Chessboard[0][0]
    }   
    //kleine Rochade
    if((_figure == 1 && _toY == 0 && _toX == 6 && whiteSmallRochade == false) || _figure == 13 && _toY == 7 && _toX == 1 && whiteSmallRochade == false){
        
    }    
}
    
function legitMove(int _figure, int _fromY, int _fromX, int _toY, int _toX) public returns(bool){

    int _movePatternX;
    int _movePatternY;
    
    if(_toX - _fromX > 0){
        _movePatternX = 1;
    }
    if(_toY - _fromY > 0){
        _movePatternY = 1;
    }
    if(_toX - _fromX == 0){
        _movePatternX = 0;
    }
    if(_toY - _fromY == 0){
        _movePatternY = 0;
    }
    if(_toX - _fromX < 0){
        _movePatternX = -1;
    }
    if(_toY - _fromY < 0){
        _movePatternY = -1;
    }
    
    //Bauer Vorwärtsbewegung
    if(_figure == 6 && _movePatternX == 0 && _movePatternY == 1 || _figure == 8 && _movePatternX == 0 && _movePatternY == -1){
        if(verticalMovement( _figure, _fromX, _fromY, _movePatternY) == true){ //TODO: Bauer kann nicht nach vorne schlagen
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
        }
    }
    
    //Bauer, wenn er eine Figure schlägt
    if(_figure == 6 && _movePatternY == 1 && (_movePatternX == 1 || _movePatternX == -1) && Chessboard[uint(_toY)][uint(_toX)] < 7 ||_figure == 8 && _movePatternY == -1 && (_movePatternX == 1 || _movePatternX == -1) && Chessboard[uint(_toY)][uint(_toX)] > 7){
        return true;
    }
    
    //weißer Bauer, wenn er 2 Schritte macht von seiner Startposition
    if(_figure == 6 && _fromY == 1 && _toY - _fromY == 2){
        //Wenn das Feld vor dem Bauern und das Zielfeld frei sind: true
        if(Chessboard[uint(_fromX + 1)][uint(_fromY + 1)] == 0 && Chessboard[uint(_toY)][uint(_toX)] == 0){
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            return true;
       }
       else{
           return false;
       }
    }
    //schwarzer Bauer, wenn er 2 Schritte macht von seiner Startposition
    if(_figure == 8 && _fromY == 6 && _toY - _fromY == -2){
        //Wenn das Feld vor dem Bauern und das Zielfeld frei sind: true
        if(Chessboard[uint(_fromX - 1)][uint(_fromY - 1)] == 0 && Chessboard[uint(_toY)][uint(_toX)] == 0){
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            return true;
       }
       else{
           return false;
       }
    }    
    //Wenn der Turm nach vorne oder hinten geht
    if(_figure == 5 || _figure == 9 && (_movePatternY == 1 || _movePatternY == -1) && _movePatternX == 0){
        if(verticalMovement(_figure, _fromX, _fromY, _movePatternY)){
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            return true;
        }
        else{
            return false;  
        }
    }
        
    //Seitliches Turm-Movement    
    if(_figure == 5 || _figure == 9 && _movePatternX == 1 || _movePatternX == -1 && _movePatternY == 0){
        if(horizontalMovement(_figure, _fromX, _fromY, _toX, _movePatternX)){
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            return true;
        }
        else{
            return false;
        }
    }
    
    //Pferd Bewegung nach oben-rechts und oben-links
    if((_figure == 4 || _figure == 10) && (_toX == _fromX + 1 || _toX == _fromX - 1) && _toY == 2){
        //Wenn eine Gleichfarbige Figure am Zielfeld steht
        if(_figure == 4 && Chessboard[uint(_toY)][uint(_toX)] < 7){
            return false;
        }
        if(_figure == 10 && Chessboard[uint(_toY)][uint(_toX)] > 7){
            return false;
        }        
        else{
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            return true;
        }
    }
    //Pferd Bewegung nach unten-links und unten-rechts
    if((_figure == 4 || _figure == 10) && (_toX == _fromX + 1 || _toX == _fromX - 1) && _toY == -2){
        //Wenn eine Gleichfarbige Figure am Zielfeld steht
        if(_figure == 4 && Chessboard[uint(_toY)][uint(_toX)] < 7){
            return false;
        }
        if(_figure == 10 && Chessboard[uint(_toY)][uint(_toX)] > 7){
            return false;
        }        
        else{
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            return true;
        }
    }    
    //Pferd Bewegung nach links-oben und links-unten
    if((_figure == 4 || _figure == 10) && (_toY == _fromY + 1 || _toY == _fromY - 1) && _toX == 2){
        //Wenn eine Gleichfarbige Figure am Zielfeld steht
        if(_figure == 4 && Chessboard[uint(_toY)][uint(_toX)] < 7){
            return false;
        }
        if(_figure == 10 && Chessboard[uint(_toY)][uint(_toX)] > 7){
            return false;
        }        
        else{
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            return true;
        }
    }   
    //Pferd Bewegung nach rechts-oben und rechts-unten
    if((_figure == 4 || _figure == 10) && (_toY == _fromY + 1 || _toY == _fromY - 1) && _toX == -2){
        //Wenn eine Gleichfarbige Figure am Zielfeld steht
        if(_figure == 4 && Chessboard[uint(_toY)][uint(_toX)] < 7){
            return false;
        }
        if(_figure == 10 && Chessboard[uint(_toY)][uint(_toX)] > 7){
            return false;
        }        
        else{
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            return true;
        }
    }     
    //Bishop-Movement
    if(_figure == 3 || _figure == 11 && _movePatternX == 1 || _movePatternX == -1 && _movePatternY == -1 || _movePatternY== 1 && _movePatternX == 1 || _movePatternX == -1){
        if(skewedMovment(_figure, _fromX, _fromY, _toY, _movePatternX, _movePatternY)){
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            return true;
        }
        else{
            return false;
        }
    }    
  
    //Queen-Movement schräg
    if(_figure == 2 || _figure == 12 && _movePatternY == 1 && _movePatternX == -1 || _movePatternX == -1 || _movePatternY== -1 && _movePatternX == -1 || _movePatternX == -1){
        if(skewedMovment(_figure, _fromX, _fromY, _toY, _movePatternX, _movePatternY)){
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;            
            return true;
        }
        else{
            return false;
        }
    } 
    //Queen-Movement horizontal
    if(_figure == 2 || _figure == 12 && _movePatternY == 0 && _movePatternX == -1 || _movePatternX == 1 && _movePatternY == 0){
        if(horizontalMovement(_figure, _fromX, _fromY, _toX, _movePatternX)){
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            return true;
        }
        else{
            return false;
        }
    }     
    //Queen-Movement vertikal
    if(_figure == 2 || _figure == 12 && _movePatternY == 1 && _movePatternX == 0 || _movePatternY == -1 && _movePatternX == 0){
        if(verticalMovement(_figure, _fromX, _fromY, _movePatternY)){
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            return true;
        }
        else{
            return false;
        }
    }      
    
    
    //King-Movement horizontal
    if((_figure == 1 || _figure == 13) && _movePatternX == 0 && (_movePatternY == 1 || _movePatternY == -1)){
        if(horizontalMovement(_figure, _fromX, _fromY, _toX, _movePatternX)){
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            return true;
        }
        else{
            return false;
        }
    }     
    //King-Movement vertikal
    if((_figure == 1 || _figure == 13) && _movePatternY == 0 && (_movePatternX == -1 || _movePatternX == -1)){
        if(verticalMovement(_figure, _fromX, _fromY, _movePatternY)){
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            return true;
        }
        else{
            return false;
        }
    } 
    else{
        return false;
    }
  
}
}




    
