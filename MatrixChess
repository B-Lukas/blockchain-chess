pragma solidity ^0.4.22;

contract Figures{
    
string[] Moves;
int[64]standardBoard;
uint[8][8] Chessboard;

function startGame() public returns(int[64]){ //800k Gas to initialize Game
    
    standardBoard = [5,4,3,2,1,3,4,5 ,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,int(-6),int(-6),int(-6),int(-6),int(-6),int(-6),int(-6),int(-6),int(-5),int(-4),int(-3),int(-2),int(-1),int(-3),int(-4),int(-5)];
    
    Chessboard[0] = [5,4,3,2,1,3,4,5];
    Chessboard[1] = [6,6,6,6,6,6,6,6];
    Chessboard[2] = [0,0,0,0,0,0,0,0];
    Chessboard[3] = [0,0,0,0,0,0,0,0];
    Chessboard[4] = [0,0,0,0,0,0,0,0];
    Chessboard[5] = [0,0,0,0,0,0,0,0];
    Chessboard[6] = [8,8,8,8,8,8,8,8];
    Chessboard[7] = [9,10,11,12,13,11,10,9];
    
    /*
    1 = WKing
    2 = WQuenn
    3 = WBishop
    4 = WKnight
    5 = WRook
    6 = WPawn
    
    0 = empty
    
    13 = BKing
    12 = BQuenn
    11 = BBishop
    10 = BKnight
    9 = BRook
    8 = BPawn
*/
    return standardBoard;
}

//TODO: Schwarzer Bauer
//TODO: Schachfeld als Bitfolge speichern
//TODO: isPathClear implementieren in skewedMovment und verticalMovement
//TODO: Zuege speichern
//TODO: Input nur zwischen 0-63 gültig
//TODO: Figurpositionen aktualisieren

//Überprüft, ob eine Figur zwischen Start- und Zielfeld steht
function isPathClear(int _figure, int _startPos, int _endPos, int _movePattern)internal returns(bool){
    bool clear = true;
    int i;
    
     for(i = _startPos + _movePattern; i != _endPos; i = i + _movePattern){
        if(clear == false){
        return false;
        }
        //Wenn eine gleichfarbige Spielfigur im Weg steht (Weiß)    
        if(_figure > 0 && standardBoard[uint(i)] > 0){
        //Sofortige invalidierung
        return false;
        }
        //Wenn eine gleichfarbige Spielfigur im Weg steht (Schwarz)
        if(_figure < 0 && standardBoard[uint(i)] < 0){ 
        //Sofortiger invalidierung
        return false;
        }
        //Wenn eine schwarze(schlagbare) Figur im Weg steht, aus weißer Perspektive
        if(_figure > 0 && standardBoard[uint(i)] < 0){
        clear == false;
        }
        //Wenn eine weiße(schlagbare) Figur im Weg steht, aus schwarzer Perspektive
        if(_figure < 0 && standardBoard[uint(i)] > 0){
        clear == false;
        }
    }
    return true;
}


function horizontalMovement(int _figure, int _startPos, int _endPos, int _movePattern)internal returns(bool){
    
    if(_startPos >= 0 && _startPos <= 7){
              
                //Wenn die Seitliche Bewegung außerhalb der Reihe liegt
                if(_endPos >= 8){
                return false;
                }
              
                if(isPathClear(_figure, _startPos, _endPos, _movePattern)){
                return true;
                }
                else{
                return false;
                }
              
              
            }
          
        if(_startPos >= 8 && _startPos <= 15){
            //Wenn die Seitliche Bewegung außerhalb der Reihe liegt
            if(_startPos < 8 &&_endPos > 15){
                return false;
              }
              
              if(isPathClear(_figure, _startPos, _endPos, _movePattern)){
                return true;
              }
              else{
                return false;
              } 
        }    
        if(_startPos >= 16 && _startPos <= 23){
            //Wenn die Seitliche Bewegung außerhalb der Reihe liegt
            if(_startPos < 16 &&_endPos > 23){
                return false;
              }
              
              if(isPathClear(_figure, _startPos, _endPos, _movePattern)){
                return true;
              }
              else{
                return false;
              } 
        }         
        if(_startPos >= 24 && _startPos <= 31){
            //Wenn die Seitliche Bewegung außerhalb der Reihe liegt
            if(_startPos < 24 &&_endPos > 31){
                return false;
              }
              
              if(isPathClear(_figure, _startPos, _endPos, _movePattern)){
                return true;
              }
              else{
                return false;
              } 
        }                    
        if(_startPos >= 32 && _startPos <= 39){
            //Wenn die Seitliche Bewegung außerhalb der Reihe liegt
            if(_startPos < 32 &&_endPos > 39){
                return false;
              }
              
              if(isPathClear(_figure, _startPos, _endPos, _movePattern)){
                return true;
              }
              else{
                return false;
              } 
        }  
        if(_startPos >= 40 && _startPos <= 47){
            //Wenn die Seitliche Bewegung außerhalb der Reihe liegt
            if(_startPos < 40 &&_endPos > 47){
                return false;
              }
              
              if(isPathClear(_figure, _startPos, _endPos, _movePattern)){
                return true;
              }
              else{
                return false;
              } 
        }           
        if(_startPos >= 48 && _startPos <= 55){
            //Wenn die Seitliche Bewegung außerhalb der Reihe liegt
            if(_startPos < 48 &&_endPos > 55){
                return false;
              }
              
              if(isPathClear(_figure, _startPos, _endPos, _movePattern)){
                return true;
              }
              else{
                return false;
              } 
        }              
        if(_startPos >= 56 && _startPos <= 63){
            //Wenn die Seitliche Bewegung außerhalb der Reihe liegt
            if(_startPos < 56 &&_endPos > 63){
                return false;
              }
              
              if(isPathClear(_figure, _startPos, _endPos, _movePattern)){
                return true;
              }
              else{
                return false;
              } 
        }
    
}

function verticalMovement(int _figure, uint _fromX, uint _fromY, uint _toX, uint _toY, uint _movePatternX, uint _movePatternY)internal view returns(bool){
    
    bool clear = true;
    int i;
    
    //TODO: Implement isPathClear
                for(i = _fromY + _movePatternY; i != _movePatternY; i = i + _movePatternY){
                    if(clear == false){
                    return false;
                    }
                    //Wenn eine gleichfarbige Spielfigur im Weg steht (Weiß)    
                    if(_figure < 7 && Chessboard[i][_fromX] > 0 && Chessboard[i][_fromX] < 7){
                    //Sofortige invalidierung
                    return false;
                    }
                    //Wenn eine gleichfarbige Spielfigur im Weg steht (Schwarz)
                    if(_figure > 8 && Chessboard[i][_fromX] < 0){ 
                    //Sofortiger invalidierung
                    return false;
                    }
                    //Wenn eine schwarze(schlagbare) Figur im Weg steht, aus weißer Perspektive
                     if(_figure > 0 && _figure < 7 && Chessboard[i][_fromX] > 7){
                    clear = false;
                    }
                    //Wenn eine weiße(schlagbare) Figur im Weg steht, aus schwarzer Perspektive
                    if(_figure < 0 && Chessboard[i][_fromX] < 7){
                    clear = false;
                }
                return true;
        }
}
    
    
function skewedMovment(int _figure, uint _fromX, uint _fromY, uint _toX, uint _toY, int _movePattern) internal view returns (bool){
    
    bool clear = true;
    int i;
    bool border = false;
    bool bordercounter = false;
    
    for(i = _startPos; i != _endPos; i = i + _movePattern){
        
        if(border == true){
            return false;
        }
        
        //TODO: Alle Randfelder eintragen
        if(bordercounter == true){
            if(standardBoard[uint(i)] == 0 || standardBoard[uint(i)] == 7 || standardBoard[uint(i)] == 7){
                border = true;
            }
        }
        bordercounter = true;
        if(clear == false){
            return false;
        }
        //Wenn eine gleichfarbige Spielfigur im Weg steht (Weiß)
        if(_figure > 0 && standardBoard[uint(i)] > 0){
        //Sofortige invalidierung
        return false;
        }
        //Wenn eine gleichfarbige Spielfigur im Weg steht (Schwarz)
        if(_figure < 0 && standardBoard[uint(i)] < 0){ 
        //Sofortiger invalidierung
        return false;
        }
        //Wenn eine schwarze(schlagbare) Figur im Weg steht, aus weißer Perspektive
        if(_figure > 0 && standardBoard[uint(i)] < 0){
        clear = false;
        }
        //Wenn eine weiße(schlagbare) Figur im Weg steht, aus schwarzer Perspektive
        if(_figure < 0 && standardBoard[uint(i)] > 0){
        clear = false;
        }
    }
}
    
function legitMove(uint _figure, uint _fromX, uint _fromY, uint _toX, uint _toY, uint _movePatternX, uint _movePatternY) public returns(bool){

/*  _movePattern
        8 = forward
        7 = skewed left             -> Bug, keine Feldgrenzen!
        9 = skewed right
*/
    bool clear = true;
    int i;
    
    //TODO: Movepattern errechnen (= Differenz)
    //TODO: Return true muss aktualisiert werden
    
    // Extra fuer WeißerBauer, wenn er sich bewegt
    if(_figure == 6 && _movePatternX == 0 && _movePatternY == 1){
        verticalMovement( _figure, _fromX, _fromY, _toX,  _toY, _movePatternX, _movePatternY);
    }
    
    // Extra fuer WeißerBauer, wenn er schlägt
    if(_figure == 6 && _movePatternX == 1 && _movePatternY == 1 || _movePatternX == -1 && _movePatternY == 1 && Chessboard[_fromY + 1][_fromX +1] < 7 || Chessboard[_fromY + 1][_fromX - 1] < 7 && _toX - _fromX = 1|| _toX - _fromX = -1 && _toY - _fromY = 1 && _toY - _fromY = -1){
        return true;
    }
    
    /*
    //Extra für WeißerBauer, wenn er 2 Schritte macht von seiner Startposition
    if(_figure == 6 && _endPos - _startPos == 16){
        //Wenn das Feld vor dem Bauern und das Zielfeld frei sind: true
       if(standardBoard[uint(_startPos + _movePattern)] == 0 && standardBoard[uint(_endPos)] == 0){
           return clear;
       }
       else{
           return false;
       }
    }
    */ 
    
    //Wenn der Turm nach vorne oder hinten geht
    if(_figure == 6 || _figure == -6 && _movePattern == 8 || _movePattern == -8){
        if(verticalMovement(_figure, _startPos, _endPos, _movePattern)){
            return true;
        }
        else{
        return false;  
        }
    }
        
    //Seitliches Turm-Movement    
    if(_figure == 6 || _figure == -6 && _movePattern == 1 || _movePattern == -1){
        if(horizontalMovement(_figure, _startPos, _endPos, _movePattern)){
             return true;
        }
        else{
        return false;
        }
    }
    
    //TODO: Randfelder
    
    //Pferd Bewegung nach links-unten
    if(_figure == 4 || _figure == -4 && _movePattern == 6){
        return true;
        
    

    //Pferd Bewegung nach links-oben
    if(_figure == 4 || _figure == -4 && _movePattern == -10){
        return true;
    }
    
    //Pferd Bewegung nach rechts-unten
    if(_figure == 4 || _figure == -4 && _movePattern == 10){
        return true;
    }    
    
    //Pferd Bewegung nach rechts-oben
    if(_figure == 4 || _figure == -4 && _movePattern == -6){
        return true;
    }    
    //Pferd Bewegung nach oben-rechts
    if(_figure == 4 || _figure == -4 && _movePattern == -15){
        return true;
    } 
    //Pferd Bewegung nach oben-links
    if(_figure == 4 || _figure == -4 && _movePattern == -17){
        return true;
    } 
    //Pferd Bewegung nach unten-links
    if(_figure == 4 || _figure == -4 && _movePattern == 15){
        return true;
    } 
    //Pferd Bewegung nach unten-rechts
    if(_figure == 4 || _figure == -4 && _movePattern == 17){
        return true;
    }
    else{
        return false;
    }
    
    //Bishop-Movement
    if(_figure == 4 || _figure == -4 && _movePattern == 7 || _movePattern == 9 || _movePattern == -7 || _movePattern == -9){
        if(skewedMovment(_figure, _startPos, _endPos, _movePattern)){
             return true;
        }
        else{
        return false;
        }
    }    
  
    //Queen-Movement schräg
    if(_figure == 2 || _figure == -2 && _movePattern == 7 || _movePattern == 9 || _movePattern == -7 || _movePattern == -9){
        if(skewedMovment(_figure, _startPos, _endPos, _movePattern)){
             return true;
        }
        else{
        return false;
        }
    } 
    //Queen-Movement horizontal
    if(_figure == 2 || _figure == -2 && _movePattern == 1 || _movePattern == -1){
        if(horizontalMovement(_figure, _startPos, _endPos, _movePattern)){
             return true;
        }
        else{
        return false;
        }
    }     
    //Queen-Movement vertikal
    if(_figure == 2 || _figure == -2 && _movePattern == 8 || _movePattern == -8){
        if(verticalMovement(_figure, _startPos, _endPos, _movePattern)){
             return true;
        }
        else{
        return false;
        }
    }      
    
    
    //King-Movement horizontal
    if(_figure == 1 || _figure == -1 && _movePattern == 1 || _movePattern == -1){
        if(horizontalMovement(_figure, _startPos, _endPos, _movePattern)){
             return true;
        }
        else{
        return false;
        }
    }     
    //King-Movement vertikal
    if(_figure == 1 || _figure == -1 && _movePattern == 8 || _movePattern == -8){
        if(verticalMovement(_figure, _startPos, _endPos, _movePattern)){
             return true;
        }
        else{
        return false;
        }
    }      
   
        }
}
}


    
