pragma solidity ^0.4.24;
import "./Ownable.sol";
contract Figures is Ownable{
    
    int[8][8] Chessboard;
    bool whiteSmallRochade = true;
    bool blackSmallRochade = true;
    bool whiteLargeRochade = true;
    bool blackLargeRochade = true;
    int gameID = -1;
    bool firstSave = false;
    uint[] arrayForStorage;
    uint[][]zuege;

    function startGame() public onlyOwner returns(int[8][8]){ 
        firstSave = true;
        gameID = gameID +1;
    
        Chessboard[0] = [5,4,3,2,1,3,4,5];
        Chessboard[1] = [6,6,6,6,6,6,6,6];
        Chessboard[2] = [0,0,0,0,0,0,0,0];
        Chessboard[3] = [0,0,0,0,0,0,0,0];
        Chessboard[4] = [0,0,0,0,0,0,0,0];
        Chessboard[5] = [0,0,0,0,0,0,0,0];
        Chessboard[6] = [8,8,8,8,8,8,8,8];
        Chessboard[7] = [9,10,11,12,13,11,10,9];
    
        /*
        1 = WKing 
        2 = WQuenn
        3 = WBishop
        4 = WKnight
        5 = WRook
        6 = WPawn
    
        0 = empty
    
        13 = BKing
        12 = BQuenn
        11 = BBishop
        10 = BKnight
        9 = BRook
        8 = BPawn 
        */
        return Chessboard;
    }

    function horizontalMovement(int _figure, int _fromY, int _fromX, int _toX, int _movePatternX)internal view returns(bool){
        //i, und clear werden immer ind den Funktionen deklariert, da so memory und Storage benutzt wird (somit ist der modifier view möglich und man spart Gas)
        int i;
        bool clear = true;
        if(_movePatternX == -1){
            for(i = _fromX + _movePatternX; i >= _toX; i = i + _movePatternX){
                if(clear == false){
                return false;
                }
                //Wenn eine gleichfarbige Spielfigur im Weg steht (Weiß)    
                if(_figure < 7 && Chessboard[uint(_fromY)][uint(i)] > 0 && Chessboard[uint(_fromY)][uint(i)] < 7){
                    //Sofortige invalidierung
                    return false;
                }
                //Wenn eine gleichfarbige Spielfigur im Weg steht (Schwarz)
                if(_figure > 7 && Chessboard[uint(_fromY)][uint(i)] > 7){ 
                    //Sofortiger invalidierung
                    return false;
                }
                //Wenn eine schwarze(schlagbare) Figur im Weg steht, aus weißer Perspektive
                if(_figure > 0 && _figure < 7 && Chessboard[uint(_fromY)][uint(i)] > 7){
                    if(_figure == 6){
                        return false;
                }
                clear = false;
                }
                //Wenn eine weiße(schlagbare) Figur im Weg steht, aus schwarzer Perspektive
                if(_figure > 7 && Chessboard[uint(_fromY)][uint(i)] < 7 && Chessboard[uint(_fromY)][uint(i)] > 0){
                    if(_figure == 8){
                        return false;
                    }
                    clear = false;
                }
            }
        }
        if(_movePatternX == 1){
            for(i = _fromX + _movePatternX; i <= _toX; i = i + _movePatternX){
                if(clear == false){
                    return false;
                }
                //Wenn eine gleichfarbige Spielfigur im Weg steht (Weiß)    
                if(_figure < 7 && Chessboard[uint(_fromY)][uint(i)] > 0 && Chessboard[uint(_fromY)][uint(i)] < 7){
                    //Sofortige invalidierung
                    return false;
                }
                //Wenn eine gleichfarbige Spielfigur im Weg steht (Schwarz)
                if(_figure > 7 && Chessboard[uint(_fromY)][uint(i)] > 7){ 
                    //Sofortiger invalidierung
                    return false;
                }
                //Wenn eine schwarze(schlagbare) Figur im Weg steht, aus weißer Perspektive
                if(_figure > 0 && _figure < 7 && Chessboard[uint(_fromY)][uint(i)] > 7){
                    if(_figure == 6){
                        return false;
                    }
                    clear = false;
                }
                //Wenn eine weiße(schlagbare) Figur im Weg steht, aus schwarzer Perspektive
                if(_figure > 7 && Chessboard[uint(_fromY)][uint(i)] < 7 && Chessboard[uint(_fromY)][uint(i)] > 0){
                    if(_figure == 8){
                        return false;            
                    }
                    clear = false;
                }
            }    
        }
        //Wenn alle Test bestanden sind, dann true
        return true;
    }

    function getBoard() public view returns(int[8][8]){
        return Chessboard;
    }    

    function verticalMovement(int _figure, int _fromY, int _fromX, int _toY, int _movePatternY)internal view returns(bool){
        //i, und clear werden immer ind den Funktionen deklariert, da so memory und Storage benutzt wird (somit ist der modifier view möglich und man spart Gas)
        bool clear = true;
        int i;

        if(_movePatternY == 1){
            for(i = _fromY + _movePatternY; i <= _toY; i = i + _movePatternY){
                if(clear == false){
                    return false;
                }
                //Wenn eine gleichfarbige Spielfigur im Weg steht (Weiß)    
                if(_figure < 7 && Chessboard[uint(i)][uint(_fromX)] > 0 && Chessboard[uint(i)][uint(_fromX)] < 7){
                    //Sofortige invalidierung
                    return false;
                }
                //Wenn eine gleichfarbige Spielfigur im Weg steht (Schwarz)
                if(_figure > 7 && Chessboard[uint(i)][uint(_fromX)] > 7){ 
                    //Sofortiger invalidierung
                    return false;
                }
                //Wenn eine schwarze(schlagbare) Figur im Weg steht, aus weißer Perspektive
                if(_figure > 0 && _figure < 7 && Chessboard[uint(i)][uint(_fromX)] > 7){
                    //Bauer kann nicht nach vorne schlagen
                    if(_figure == 6){
                        return false;
                    }          
                    clear = false;
                }
                //Wenn eine weiße(schlagbare) Figur im Weg steht, aus schwarzer Perspektive
                if(_figure > 7 && Chessboard[uint(i)][uint(_fromX)] < 7 && Chessboard[uint(i)][uint(_fromX)] > 0){
                    if(_figure == 6){
                        return false;
                    }            
                    clear = false;
                }
            }
        }
  
        if(_movePatternY == -1){  
            for(i = _fromY + _movePatternY; i >= _toY; i = i + _movePatternY){
                if(clear == false){
                    return false;
                }
            //Wenn eine gleichfarbige Spielfigur im Weg steht (Weiß)    
                if(_figure < 7 && Chessboard[uint(i)][uint(_fromX)] > 0 && Chessboard[uint(i)][uint(_fromX)] < 7){
                    //Sofortige invalidierung
                    return false;
                }
                //Wenn eine gleichfarbige Spielfigur im Weg steht (Schwarz)
                if(_figure > 7 && Chessboard[uint(i)][uint(_fromX)] > 7){ 
                    //Sofortiger invalidierung
                    return false;
                }
                //Wenn eine schwarze(schlagbare) Figur im Weg steht, aus weißer Perspektive
                if(_figure > 0 && _figure < 7 && Chessboard[uint(i)][uint(_fromX)] > 7){
                    if(_figure == 6){
                    return false;
                    }          
                    clear = false;
                }
                //Wenn eine weiße(schlagbare) Figur im Weg steht, aus schwarzer Perspektive
                if(_figure > 7 && Chessboard[uint(i)][uint(_fromX)] < 7 && Chessboard[uint(i)][uint(_fromX)] > 0){
                    if(_figure == 6){
                        return false;
                    }            
                    clear = false;
                }
            }    
        }
        //Wenn alle Test bestanden sind, dann true
        return true;    
    }
    
    
    function skewedMovment(int _figure, int _fromY, int _fromX, int _toY, int _movePatternX, int _movePatternY) internal view returns (bool){
        //i, und clear werden immer ind den Funktionen deklariert, da so memory und Storage benutzt wird (somit ist der modifier view möglich und man spart Gas)
        bool clear = true;
        int i;

        //Schräg nach oben-rechts und oben-links
        if(_movePatternY == 1){
            for(i = _fromY + _movePatternY; i <= _toY; i = i + _movePatternY){
                _fromX = _fromX + _movePatternX;
            
                if(clear == false){
                    return false;
                }    
                if(_figure > 7 && Chessboard[uint(i)][uint(_fromX)] > 7){
                    return false;
                }
                if(_figure < 7 && Chessboard[uint(i)][uint(_fromX)] < 7 && Chessboard[uint(i)][uint(_fromX)] > 0){
                    return false;   
                }
                if(_figure > 7 && Chessboard[uint(i)][uint(_fromX)] < 7 && Chessboard[uint(i)][uint(_fromX)] > 0){
                    clear = false;
                }
                if(_figure < 7 && Chessboard[uint(i)][uint(_fromX)] > 7){
                    clear = false;   
                }
            }
        }    

        //Schräg nach unten-links und unten rechts
        if(_movePatternY == -1){
            for(i = _fromY + _movePatternY; i >= _toY; i = i + _movePatternY){
                _fromX = _fromX + _movePatternX;
            
                if(clear == false){
                    return false;
                }    
                if(_figure > 7 && Chessboard[uint(i)][uint(_fromX)] > 7){
                    return false;
                }
                if(_figure < 7 && Chessboard[uint(i)][uint(_fromX)] < 7 && Chessboard[uint(i)][uint(_fromX)] > 0 ){
                    return false;   
                }
                if(_figure > 7 && Chessboard[uint(i)][uint(_fromX)] < 7 && Chessboard[uint(i)][uint(_fromX)] > 0){
                    clear = false;
                }
                if(_figure < 7 && Chessboard[uint(i)][uint(_fromX)] > 7 ){
                    clear = false;   
                }
            }
        
        }
        return true;
    } 
    //Extra funktion für die Rochade
    function rochade(int _fromY, int _fromX, int _toY, int _toX)public onlyOwner returns(bool){
        uint c = 0;
        int _figure = Chessboard[uint(_fromY)][uint(_fromX)];
        if(_figure == 0){
            return false;
        }
        //große Rochade
        if((_figure == 1 && _toY == 0 && _toX == 2 && whiteLargeRochade == true) ||( _figure == 13 && _toY == 7 && _toX == 2 && blackLargeRochade == true)){
        
            for(c = 1;c < 4 ;c++){
                if(_figure == 1){
                    if(Chessboard[0][c] != 0){
                        return false;
                    }
                }
                if(_figure == 13){
                    if(Chessboard[7][c] != 0){
                        return false;
                    }
                }            
            }
            if(_figure == 1){  
                Chessboard[0][0] = 0;
                Chessboard[0][4] = 0;
                Chessboard[0][2] = 1;
                Chessboard[0][3] = 5;     
                return true;
            }
            if(_figure == 13){  
                Chessboard[7][0] = 0;
                Chessboard[7][4] = 0;
                Chessboard[7][2] = 13;
                Chessboard[7][3] = 9;   
                return true;
            }        
        }   
        //kleine Rochade
        if((_figure == 1 && _toY == 0 && _toX == 6 && whiteSmallRochade == true) || (_figure == 13 && _toY == 7 && _toX == 6 && blackSmallRochade == true)){
        
            for(c = 5;c < 7;c++){
                if(_figure == 1){
                    if(Chessboard[0][c] != 0){
                            return false;
                    }
                }
                if(_figure == 13){
                    if(Chessboard[7][c] != 0){
                        return false;
                    }
                }            
            }
            if(_figure == 1){  
                Chessboard[0][7] = 0;
                Chessboard[0][4] = 0;
                Chessboard[0][6] = 1;
                Chessboard[0][5] = 5;     
                return true;
            }
            if(_figure == 13){  
                Chessboard[7][7] = 0;
                Chessboard[7][4] = 0;
                Chessboard[7][6] = 13;
                Chessboard[7][5] = 9;   
                return true;
            }        
        }     
    }    

    function addToArray(int _fromY, int _fromX, int _toY, int _toX) onlyOwner internal  {
        //Auch hier speichern wir den Zug wieder in vier Werten
        if(firstSave == true){
            zuege.push(arrayForStorage);
            zuege[uint(gameID)].push((uint(_fromY)));
            zuege[uint(gameID)].push((uint(_fromX)));
            zuege[uint(gameID)].push((uint(_toY)));
            zuege[uint(gameID)].push((uint(_toX)));
        }
        else{
            zuege[uint(gameID)].push((uint(_fromY)));
            zuege[uint(gameID)].push(uint(_fromX));
            zuege[uint(gameID)].push(uint(_toY));
            zuege[uint(gameID)].push(uint(_toX));
        }
    
        firstSave = false;
    }   

    function getGame(uint _gameId)public view returns(uint[]){
        return zuege[_gameId];
    }
    
    function legitMove(int _fromY, int _fromX, int _toY, int _toX) public onlyOwner returns(bool){
    
        int _figure = Chessboard[uint(_fromY)][uint(_fromX)];
    
        if(_figure == 0){
            return false;
        }
        int _movePatternX;
        int _movePatternY;

        if(_toX - _fromX > 0){
            _movePatternX = 1;
        }
        if(_toY - _fromY > 0){
            _movePatternY = 1;
        }
        if(_toX - _fromX == 0){
            _movePatternX = 0;
        }
        if(_toY - _fromY == 0){
            _movePatternY = 0;
        }
        if(_toX - _fromX < 0){
            _movePatternX = -1;
        }
        if(_toY - _fromY < 0){
            _movePatternY = -1;
        }

        //Bauer Vorwärtsbewegung
        if((_figure == 6 && _movePatternX == 0 && _movePatternY == 1 && _fromY - _toY == -1)||( _figure == 8 && _movePatternX == 0 && _movePatternY == -1) && _fromY - _toY == 1){
            if(verticalMovement(_figure, _fromY, _fromX, _toY, _movePatternY) == true){ 
                Chessboard[uint(_fromY)][uint(_fromX)] = 0;
                Chessboard[uint(_toY)][uint(_toX)] = _figure;
                addToArray(_fromY, _fromX, _toY, _toX);
                return true;
            }
        }
    
        //Bauer, wenn er eine Figure schlägt
        if((_figure == 6 && _movePatternY == 1 && (_movePatternX == 1 || _movePatternX == -1) && Chessboard[uint(_toY)][uint(_toX)] > 7 && _fromY - _toY == -1 && (_fromX - _toX == -1 ||_fromX - _toX == 1))||(_figure == 8 && _movePatternY == -1 && (_movePatternX == 1 || _movePatternX == -1) && Chessboard[uint(_toY)][uint(_toX)] < 7 && _fromY - _toY == 1 && (_fromX - _toX == 1||_fromX - _toX == -1))){
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;     
            addToArray(_fromY, _fromX, _toY, _toX);
            return true;
        }
    
        //weißer Bauer, wenn er 2 Schritte macht von seiner Startposition
        if(_figure == 6 && _fromY == 1 && _toY - _fromY == 2 && _movePatternX == 0){
            //Wenn das Feld vor dem Bauern und das Zielfeld frei sind: true
            if(Chessboard[uint(_fromY +1)][uint(_fromX)] == 0 && Chessboard[uint(_toY)][uint(_toX)] == 0){
                Chessboard[uint(_fromY)][uint(_fromX)] = 0;
                Chessboard[uint(_toY)][uint(_toX)] = _figure;
                addToArray(_fromY, _fromX, _toY, _toX);
                return true;
            }
        else{
            return false;
        }
        }
        //schwarzer Bauer, wenn er 2 Schritte macht von seiner Startposition
        if(_figure == 8 && _fromY == 6 && _toY - _fromY == -2 && _movePatternX == 0){
            //Wenn das Feld vor dem Bauern und das Zielfeld frei sind: true
            if(Chessboard[uint(_fromY -1)][uint(_fromX)] == 0 && Chessboard[uint(_toY)][uint(_toX)] == 0){
                Chessboard[uint(_fromY)][uint(_fromX)] = 0;
                Chessboard[uint(_toY)][uint(_toX)] = _figure;
                addToArray(_fromY, _fromX, _toY, _toX);
                return true;
        }
        else{
            return false;
            }
        }    
        //Wenn der Turm nach vorne oder hinten geht
        if((_figure == 5 || _figure == 9) && (_movePatternY == 1 || _movePatternY == -1) && _movePatternX == 0 && _fromX - _toX == 0){
            //Code, damit die Rochade nach der Bewegung nicht mehr geht
    
            if(verticalMovement(_figure, _fromX, _fromY,_toY, _movePatternY)){
                Chessboard[uint(_fromY)][uint(_fromX)] = 0;
                Chessboard[uint(_toY)][uint(_toX)] = _figure;
                addToArray(_fromY, _fromX, _toY, _toX);
                if(_figure == 5 && _fromX == 0 && _fromY == 0){
                    whiteLargeRochade = false;
                }
                if(_figure == 5 && _fromX == 7 && _fromY == 0){
                    whiteSmallRochade = false;
                }
                if(_figure == 9 && _fromX == 0 && _fromY == 7){
                 blackLargeRochade = false;
                }
                if(_figure == 9 && _fromX == 7 && _fromY == 7){
                    blackSmallRochade = false;
                }       
                return true;
            }
            else{
                return false;  
            }
        }
        
        //Seitliches Turm-Movement    
        if((_figure == 5 || _figure == 9) && _movePatternY == 0 && (_movePatternX == -1 || _movePatternX == 1) && _fromY - _toY == 0){
    
            if(horizontalMovement(_figure, _fromY, _fromX, _toX, _movePatternX)){
                Chessboard[uint(_fromY)][uint(_fromX)] = 0;
                Chessboard[uint(_toY)][uint(_toX)] = _figure;
                addToArray(_fromY, _fromX, _toY, _toX);
            if(_figure == 5 && _fromX == 0 && _fromY == 0){
                whiteLargeRochade = false;
            }
            if(_figure == 5 && _fromX == 7 && _fromY == 0){
                whiteSmallRochade = false;
            }
            if(_figure == 9 && _fromX == 0 && _fromY == 7){
                blackLargeRochade = false;
            }
            if(_figure == 9 && _fromX == 7 && _fromY == 7){
                blackSmallRochade = false;
            }    
                return true;
            }
            else{
                return false;
            }
        }
    
        //Pferd Bewegung nach oben-rechts und oben-links
        if((_figure == 4 || _figure == 10) && (_toX == _fromX + 1 || _toX == _fromX - 1) && _toY - _fromY == 2){
            //Wenn eine Gleichfarbige Figure am Zielfeld steht
            if(_figure == 4 && Chessboard[uint(_toY)][uint(_toX)] < 7 && Chessboard[uint(_toY)][uint(_toX)] > 0){
                return false;
            }
            if(_figure == 10 && Chessboard[uint(_toY)][uint(_toX)] > 7){
                return false;
            }
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            addToArray(_fromY, _fromX, _toY, _toX);
            return true;
        }
        //Pferd Bewegung nach unten-links und unten-rechts
        if((_figure == 4 || _figure == 10) && (_toX == _fromX + 1 || _toX == _fromX - 1) && _toY - _fromY == -2){
            //Wenn eine Gleichfarbige Figure am Zielfeld steht
            if(_figure == 4 && Chessboard[uint(_toY)][uint(_toX)] < 7 && Chessboard[uint(_toY)][uint(_toX)] > 0){
                return false;
            }
            if(_figure == 10 && Chessboard[uint(_toY)][uint(_toX)] > 7){
                return false;
            }        
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            addToArray(_fromY, _fromX, _toY, _toX);
            return true;
        }    
        //Pferd Bewegung nach links-oben und links-unten
        if((_figure == 4 || _figure == 10) && (_toY == _fromY + 1 || _toY == _fromY - 1) && _toX - _fromX == 2){
            //Wenn eine Gleichfarbige Figure am Zielfeld steht
            if(_figure == 4 && Chessboard[uint(_toY)][uint(_toX)] < 7 && Chessboard[uint(_toY)][uint(_toX)] > 0){
                return false;
            }
            if(_figure == 10 && Chessboard[uint(_toY)][uint(_toX)] > 7){
                return false;
            }        
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            addToArray(_fromY, _fromX, _toY, _toX);
            return true;
        }   
        //Pferd Bewegung nach rechts-oben und rechts-unten
        if((_figure == 4 || _figure == 10) && (_toY == _fromY + 1 || _toY == _fromY - 1) && _toX - _fromX == -2){
            //Wenn eine Gleichfarbige Figure am Zielfeld steht
            if(_figure == 4 && Chessboard[uint(_toY)][uint(_toX)] < 7 && Chessboard[uint(_toY)][uint(_toX)] > 0){
                return false;
            }
            if(_figure == 10 && Chessboard[uint(_toY)][uint(_toX)] > 7){
                return false;
            }        
            Chessboard[uint(_fromY)][uint(_fromX)] = 0;
            Chessboard[uint(_toY)][uint(_toX)] = _figure;
            addToArray(_fromY, _fromX, _toY, _toX);
            return true;
        }     
        //Bishop-Movement
        if((_figure == 3 || _figure == 11 ) && ((_movePatternY == 1 && (_movePatternX == 1 || _movePatternX== -1)) || ((_movePatternY == -1 && (_movePatternX == 1 || _movePatternX== -1))))){
            if(_fromY - _toY == _fromX - _toX || ((_fromY - _toY) == ((_fromX - _toX)*-1))){
                if(skewedMovment(_figure, _fromY, _fromX, _toY, _movePatternX, _movePatternY)){
                    Chessboard[uint(_fromY)][uint(_fromX)] = 0;
                    Chessboard[uint(_toY)][uint(_toX)] = _figure;
                    addToArray(_fromY, _fromX, _toY, _toX);
                    return true;
                }
            }
            else{
                return false;
            }
        }    
  
        //Queen-Movement schräg
        if((_figure == 2 || _figure == 12) && ((_movePatternY == 1 && (_movePatternX == 1 || _movePatternX== -1)) || ((_movePatternY == -1 && (_movePatternX == 1 || _movePatternX== -1))))){
            if(_fromY - _toY == _fromX - _toX || ((_fromY - _toY) == ((_fromX - _toX)*-1))){
                if(skewedMovment(_figure, _fromY, _fromX, _toY, _movePatternX, _movePatternY)){
                    Chessboard[uint(_fromY)][uint(_fromX)] = 0;
                    Chessboard[uint(_toY)][uint(_toX)] = _figure;
                    addToArray(_fromY, _fromX, _toY, _toX);
                    return true;
                }
            }
            else{
                return false;
            }
        } 
        //Queen-Movement horizontal
        if((_figure == 2 || _figure == 12) && _movePatternY == 0 && (_movePatternX == -1 || _movePatternX == 1)){
            if(horizontalMovement(_figure, _fromY, _fromX, _toX, _movePatternX)){
                Chessboard[uint(_fromY)][uint(_fromX)] = 0;
                Chessboard[uint(_toY)][uint(_toX)] = _figure;
                addToArray(_fromY, _fromX, _toY, _toX);
                return true;
            }
            else{
                return false;
            }
        }     
        //Queen-Movement vertikal
        if((_figure == 2 || _figure == 12) && _movePatternX == 0 && (_movePatternY == 1 || _movePatternY == -1)){
            if(verticalMovement(_figure, _fromY, _fromX, _toY, _movePatternY)){
                Chessboard[uint(_fromY)][uint(_fromX)] = 0;
                Chessboard[uint(_toY)][uint(_toX)] = _figure;
                addToArray(_fromY, _fromX, _toY, _toX);
                return true;
            }
            else{
                return false;
            }
        }      
        //King-Movement horizontal
        if((_figure == 1 || _figure == 13) && _movePatternY == 0 && (_movePatternX == -1 || _movePatternX == 1)){
            //Filtern ob die Figur mehr als 2 Felder läuft
            if(_fromX - _toX == 1 || _fromX - _toX == -1){
                if(horizontalMovement(_figure, _fromY, _fromX, _toX, _movePatternX)){
                    if(_figure == 1 && _fromX == 5 && _fromY == 0){
                        whiteLargeRochade = false;
                        whiteSmallRochade = false;
                    }
                    if(_figure == 13 && _fromX == 5 && _fromY == 7){
                        blackLargeRochade = false;
                        blackSmallRochade = false;
                    }                    
                    Chessboard[uint(_fromY)][uint(_fromX)] = 0;
                    Chessboard[uint(_toY)][uint(_toX)] = _figure;
                    addToArray(_fromY, _fromX, _toY, _toX);
                    return true;
                }
                else{
                    return false;
                }
            }
        }
        //King-Movement vertikal
        if((_figure == 1 || _figure == 13) && _movePatternX == 0 && (_movePatternY == 1 || _movePatternY == -1)){
            //Filtern ob die Figur mehr als 2 Felder läuft
            if(_fromY - _toY == 1 || _fromY - _toY == -1){
        
                if(verticalMovement(_figure, _fromY, _fromX, _toY, _movePatternY)){
                    if(_figure == 1 && _fromX == 5 && _fromY == 0){
                        whiteLargeRochade = false;
                        whiteSmallRochade = false;
                    }
                    if(_figure == 13 && _fromX == 5 && _fromY == 7){
                        blackLargeRochade = false;
                        blackSmallRochade = false;
                    }                    
                    Chessboard[uint(_fromY)][uint(_fromX)] = 0;
                    Chessboard[uint(_toY)][uint(_toX)] = _figure;
                    addToArray(_fromY, _fromX, _toY, _toX);
                    return true;
                }
            }
            return false;
        }
        //King-schraeges Movement
        if((_figure == 1 || _figure == 13)  && ((_movePatternY == 1 && (_movePatternX == 1 || _movePatternX== -1)) || ((_movePatternY == -1 && (_movePatternX == 1 || _movePatternX== -1))))){
        
            if((_fromY - _toY == 1 || _fromY - _toY == -1) && (_fromX - _toX == 1 || _fromX - _toX == -1)){
        
        
                if(_fromY - _toY == _fromX - _toX || ((_fromY - _toY) == ((_fromX - _toX)*-1))){
                    if(skewedMovment(_figure, _fromY, _fromX, _toY,_movePatternX, _movePatternY)){
                        if(_figure == 1 && _fromX == 5 && _fromY == 0){
                            whiteLargeRochade = false;
                            whiteSmallRochade = false;
                        }
                        if(_figure == 13 && _fromX == 5 && _fromY == 7){
                            blackLargeRochade = false;
                            blackSmallRochade = false;
                        }
                        Chessboard[uint(_fromY)][uint(_fromX)] = 0;
                        Chessboard[uint(_toY)][uint(_toX)] = _figure;
                        addToArray(_fromY, _fromX, _toY, _toX);
                        return true;
                    }
                }
            else{
                return false;
            }
            }
        } 
        else{
            return false;
        }
  
    }
}
