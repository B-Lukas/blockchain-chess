pragma solidity ^0.4.2;


//TODO: Ownable, Wetten, Ein Integer als Speicher


contract Figures{
    
string[] Moves;
int[64] currentBoarduint;


int[64]standardBoard;

function startGame() public returns(int[64]){ //800k Gas to initialize Game
    
    standardBoard = [5,4,3,2,1,3,4,5,6,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,int(-6),int(-6),int(-6),int(-6),int(-6),int(-6),int(-6),int(-6),int(-5),int(-4),int(-3),int(-2),int(-1),int(-3),int(-4),int(-5)];

    /*
    1 = WKing
    2 = WQuenn
    3 = WBishop
    4 = WKnight
    5 = WRook
    6 = WPawn
    
    0 = empty
    
    -1 = BKing
    -2 = BQuenn
    -3 = BBishop
    -4 = BKnight
    -5 = BRook
    -6 = BPawn
*/
    return standardBoard;
}

//TODO Alles Postionen des Schachfeldes nur noch als Index?

function isPathClear(int _figure, int _startPos, int _endPos, int _movePattern) public returns(bool){

/*  _movePattern
        8 = forward
        7 = skewed left             -> Bug, keine Feldgrenzen!
        9 = skewed right
*/
    bool clear = true;
    int i;
    
    // Extra fuer WeißerBauer, wenn er sich bewegt
    if(_figure == 6 && _movePattern == 8){
        for(i = _startPos + _movePattern;i <= _endPos; i = i + _movePattern){
        
            if(standardBoard[uint(i)] > 0 || standardBoard[uint(i)] < 0 ){
                clear = false;
            }
        }
        return clear;
    }
    // Extra fuer WeißerBauer, wenn er schlägt
    if(_figure == 6 && _movePattern == 7 || _movePattern == 9){
            if(standardBoard[uint(_endPos)] == 0 || standardBoard[uint(_endPos)] > 0 ){
                clear = false;
            }
        return clear;
    }
    //Extra für WeißerBauer, wenn er 2 Schritte macht von seiner Startposition
    if(_figure == 6 && _endPos - _startPos == 16){
        //Wenn das Feld vor dem Bauern und das Zielfeld frei sind: true
       if(standardBoard[uint(_startPos + _movePattern)] == 0 && standardBoard[uint(_endPos)] == 0){
           return clear;
       }
       else{
           return false;
       }
    }
    
    //Wenn der Turm nach vorne oder hinten geht
    if(_figure == 6 && _movePattern == 8 || _movePattern == -8){
            for(i = _startPos + _movePattern; i <= _endPos; i = i + _movePattern){
                    if(clear == false){
                    return false;
                    }
                //Wenn eine gleichfarbige Spielfigur im Weg steht (Weiß)    
                if(_figure > 0 && standardBoard[uint(i)] > 0){
                    //Sofortige invalidierung
                    return false;
                }
                //Wenn eine gleichfarbige Spielfigur im Weg steht (Schwarz)
                if(_figure < 0 && standardBoard[uint(i)] < 0){ 
                    //Sofortiger invalidierung
                    return false;
                }
                //Wenn eine schwarze(schlagbare) Figur im Weg steht, aus weißer Perspektive
                if(_figure > 0 && standardBoard[uint(i)] < 0){
                    clear == false;
                }
                //Wenn eine weiße(schlagbare) Figur im Weg steht, aus schwarzer Perspektive
                if(_figure < 0 && standardBoard[uint(i)] > 0){
                    clear == false;
                }
                
                }
                return true;
            }
}

    
function legitMove(int _figure, int _oldIndex, int _newIndex)  public returns(bool){
    
    if(_figure == 6){       //Weißer Bauer
        
        int mathMove = _newIndex - _oldIndex; //TODO: Modulo!
        
        //Forwaertz TODO: 2 Schritte am Anfang
        //Wenn der Bauer Weiß ist & auf seinem Zielfeld keine Figur steht. D.h. Der Bauer bewegt sich normal
        if(mathMove%8 == 0 && isPathClear(_figure, _oldIndex, _newIndex, mathMove%10)){
            //Figur von der alten Position entfernen
            standardBoard[uint(_oldIndex)] = 0;
            //Figur auf die neue Position setzten
            standardBoard[uint(_newIndex)] = 6;
            //return true, damit die Webseite weiß, ob der Zug erfogreich war oder nicht
            return true;
        }
        //Wenn der Bauer Weiß ist und sich schräg bewegt. D.h. Der Bauer schlägt eine andere Figur    
        if(mathMove%7 == 0 || mathMove%9 == 0 && isPathClear(_figure, _oldIndex, _newIndex, mathMove%10)){
            
        }
        //Wenn der Zug ungültig ist:
        else{
            return false;
        }    
    }      
    
    if(_figure == -6){      //Schwarzer Bauer
        
    }       

    if(_figure == 5){       //Weißer Turm
        if(mathMove%8 == 0 && isPathClear(_figure, _oldIndex, _newIndex, mathMove%10)){
            //Figur von der alten Position entfernen
            standardBoard[uint(_oldIndex)] = 0;
            //Figur auf die neue Position setzten
            standardBoard[uint(_newIndex)] = _figure;
            return true;
        }
        else{
            return false;
        }
    } 
    
    if(_figure == -5){      //Schwarzer Turm
        
    }
    
    if(_figure == 4 ){      //Weißer Springer
        
    } 
    
    if(_figure == -4){      //Schwarzer Springer
        
    }
    
    if(_figure == 3){       //Weißer Laeufer
        
    }
    
    if(_figure == -3){      //Schwarzer Laufer
        
    }
    
    if(_figure == 2){       //Weiße Dame
        
    } 
    
    if(_figure == -2){      //Schwarze Dame
        
    }
    
    if(_figure == 1){       //Weißer Koenig
        
    } 
    
    if(_figure == -1){      //Schwarzer Koenig
        
    }
    
    
    
    
    //Speichern
    Moves.push("");  //~ 100k Gas pro Zug
    
    return true;
    
}

}
    
